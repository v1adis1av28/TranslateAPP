import * as React from 'react';
import { ColorValue, ViewStyle, TextStyle } from 'react-native';
import { PlatformPressable } from '@react-navigation/elements';
import type { ComponentProps, ReactNode } from 'react';
export type VisibleButtonProps = {
    title: string;
    IconComponent?: React.ComponentType<{
        name: any;
        style?: any;
        color?: ColorValue;
        size?: number;
    }>;
    iconName?: string;
    iconSize?: number;
    color?: ColorValue;
    buttonStyle?: ViewStyle | TextStyle;
};
type PlatformPressableProps = ComponentProps<typeof PlatformPressable>;
export type RenderButtonCallbackParams = Omit<VisibleButtonProps, 'color'> & {
    color: ColorValue;
};
type RenderButtonType = {
    renderButton: <T extends RenderButtonCallbackParams>(params: T) => ReactNode;
};
type BaseProps = Omit<PlatformPressableProps, 'children'> & VisibleButtonProps;
export type ItemProps = BaseProps & Partial<RenderButtonType>;
export type HeaderButtonProps = BaseProps & RenderButtonType;
export declare function HeaderButton(props: HeaderButtonProps): React.JSX.Element;
export declare function defaultRenderVisibleButton(visibleButtonProps: VisibleButtonProps): React.ReactElement;
export {};
//# sourceMappingURL=HeaderButton.d.ts.map