function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import * as React from 'react';
import { HeaderButtonComponentContext } from './HeaderButtonComponentContext';
import { useOverflowMenu } from './overflowMenu/OverflowMenuContext';
import { MenuItem } from './overflowMenu/vendor/MenuItem';
import { defaultRenderVisibleButton } from './HeaderButton';
export function HiddenItem(_ref) {
  let {
    onPress,
    ...otherProps
  } = _ref;
  const {
    closeMenu
  } = useOverflowMenu();

  // when rendering dropdown menu (e.g. android default) the return value is actually rendered
  // when we show action sheet, we do not render the returned value,
  // but just extract title, onPress and destructive passed to HiddenItem. HiddenItem() is not called
  const onMenuItemPress = nativeEvent => {
    closeMenu();
    onPress && onPress(nativeEvent);
  };
  return /*#__PURE__*/React.createElement(MenuItem, _extends({}, otherProps, {
    onPress: onMenuItemPress
  }));
}

// TODO check RTL
export function Item(props) {
  const HeaderButtonComponent = React.useContext(HeaderButtonComponentContext);
  // HeaderButtonComponent (HeaderButton by default) already is provided iconSize, icon color and etc.
  // Item itself will likely only have title, onPress and iconName
  // but also can override iconSize, icon color, etc. if needed
  return /*#__PURE__*/React.createElement(HeaderButtonComponent, _extends({
    renderButton: defaultRenderVisibleButton
  }, props));
}
//# sourceMappingURL=HeaderItems.js.map