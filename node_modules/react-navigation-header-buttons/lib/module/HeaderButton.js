function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import * as React from 'react';
import { StyleSheet, Platform, Text } from 'react-native';
import { useTheme } from '@react-navigation/native';
import { PlatformPressable } from '@react-navigation/elements';

// for renderVisibleButton() function

// for <Item />, some things are optional while they are required for HeaderButton

export function HeaderButton(props) {
  const {
    colors
  } = useTheme();
  const themeColor = Platform.select({
    ios: colors.primary,
    default: colors.text
  });
  const {
    renderButton,
    style,
    color,
    ...other
  } = props;
  const ButtonElement = renderButton({
    color: color || themeColor,
    ...other
  });
  return /*#__PURE__*/React.createElement(PlatformPressable, _extends({
    hitSlop: buttonHitSlop
    // @ts-expect-error typings too strict
    ,
    style: StyleSheet.compose(styles.buttonContainer, style),
    android_ripple: rippleConfig
  }, other), ButtonElement);
}
export function defaultRenderVisibleButton(visibleButtonProps) {
  const {
    IconComponent,
    iconSize,
    color,
    iconName,
    title,
    buttonStyle
  } = visibleButtonProps;
  return IconComponent && iconName ? /*#__PURE__*/React.createElement(IconComponent, {
    name: iconName,
    color: color,
    size: iconSize,
    style: buttonStyle
  }) : /*#__PURE__*/React.createElement(Text, {
    style: [styles.text, {
      color
    }, buttonStyle]
  }, title);
}
const styles = StyleSheet.create({
  text: {
    ...Platform.select({
      android: {
        fontFamily: 'sans-serif-medium',
        fontSize: 14,
        textTransform: 'uppercase'
      },
      default: {
        fontSize: 17,
        textTransform: 'capitalize'
      }
    })
  },
  buttonContainer: {
    alignItems: 'center',
    justifyContent: 'center'
  }
});
const rippleConfig = {
  foreground: true,
  borderless: true,
  radius: 20
};
const buttonHitSlop = {
  top: 5,
  bottom: 5,
  left: 5,
  right: 5
};
//# sourceMappingURL=HeaderButton.js.map