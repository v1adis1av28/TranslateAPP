function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { extractOverflowButtonData, overflowMenuPressHandlerDropdownMenu, defaultOnOverflowMenuPress } from './overflowMenuPressHandlers';
import { OVERFLOW_TOP, useOverflowMenu } from './OverflowMenuContext';
import { View, StyleSheet } from 'react-native';
import { HeaderButton } from '../HeaderButton';
import { OVERFLOW_BUTTON_TEST_ID } from '../e2e';
import { ButtonsWrapper } from '../ButtonsWrapper';
import { Children, isValidElement, useCallback, useRef } from 'react';
import * as React from 'react';
export const OverflowMenu = _ref => {
  let {
    children,
    OverflowIcon = /*#__PURE__*/React.createElement(View, null),
    accessibilityLabel = 'More options',
    testID = OVERFLOW_BUTTON_TEST_ID,
    onPress = defaultOnOverflowMenuPress,
    left = false,
    // this is needed only when OverflowMenu is rendered without HeaderButtons,
    preset,
    ...other
  } = _ref;
  const presentationCalls = useOverflowMenu();
  const btnRef = useRef(null);
  const renderButtonElement = useCallback(_ref2 => {
    let {
      color
    } = _ref2;
    return /*#__PURE__*/isValidElement(OverflowIcon) ? OverflowIcon : /*#__PURE__*/React.createElement(OverflowIcon, {
      color: color
    });
  }, [OverflowIcon]);
  const presentOverflowMenu = useCallback(() => {
    const titlesAndOnPresses = onPress === overflowMenuPressHandlerDropdownMenu ? [] : extractOverflowButtonData(children);
    onPress({
      children,
      hiddenButtons: titlesAndOnPresses,
      overflowButtonRef: btnRef.current,
      ...presentationCalls
    });
  }, [children, onPress, presentationCalls]);
  const validChildren = Children.toArray(children).filter(isValidElement);
  if (validChildren.length === 0) {
    return null;
  }
  return /*#__PURE__*/React.createElement(ButtonsWrapper, {
    left: left,
    style: styles.wrapper,
    preset: preset
  }, /*#__PURE__*/React.createElement(View, {
    ref: btnRef,
    collapsable: false,
    style: styles.overflowMenuAnchor
  }), /*#__PURE__*/React.createElement(HeaderButton, _extends({
    title: "overflow menu",
    renderButton: renderButtonElement,
    onPress: presentOverflowMenu,
    accessibilityLabel: accessibilityLabel,
    testID: testID
  }, other)));
};
const styles = StyleSheet.create({
  wrapper: {
    columnGap: 0
  },
  overflowMenuAnchor: {
    // these are really just needed bcs of the native android popup menu
    position: 'absolute',
    top: -OVERFLOW_TOP,
    // TODO android actually has a little gap on the right of the menu
    right: -15,
    backgroundColor: 'transparent',
    width: 1,
    height: 1
  }
});
//# sourceMappingURL=OverflowMenu.js.map