import { Dimensions } from 'react-native';
import { getDefaultSpaceAboveMenu } from './statusBarUtils';
import { Menu } from './vendor/Menu';
import { useTheme } from '@react-navigation/native';
import { createContext, useCallback, useContext, useMemo, useState } from 'react';
import * as React from 'react';
import { ButtonsExtraMarginContext } from '../ButtonsWrapper';
export const OVERFLOW_TOP = 15;
const warn = () => {
  // the noop value will be replaced by HeaderButtonsProvider rendered in app root
  console.warn('It seems like you tried to open / close the overflow menu using the overflowMenuPressHandlerDropdownMenu' + ' - which is the default handler on android - but you forgot to wrap your root component in <HeaderButtonsProvider />.' + 'Please check the installation instructions in the react-navigation-header-buttons readme :)');
};
const OverflowMenuContext = /*#__PURE__*/createContext({
  presentMenu: warn,
  closeMenu: warn
});
export const useOverflowMenu = () => useContext(OverflowMenuContext);
export const HeaderButtonsProvider = _ref => {
  let {
    children,
    spaceAboveMenu,
    stackType
  } = _ref;
  const [menuState, setMenuState] = useState({
    visible: false,
    position: {
      x: Dimensions.get('window').width - 10,
      y: 40
    },
    elements: null
  });
  const {
    colors: {
      card
    }
  } = useTheme();
  const closeMenu = useCallback(() => {
    setMenuState(prevState => ({
      ...prevState,
      visible: false
    }));
  }, []);
  const presentMenu = useCallback(params => {
    const extraDelta = spaceAboveMenu ?? getDefaultSpaceAboveMenu();
    setMenuState(prevState => {
      const position = params ? {
        x: params.x,
        y: params.y + extraDelta
      } : prevState.position;
      const elements = params ? params.elements : prevState.elements;
      return {
        ...prevState,
        position,
        elements,
        visible: true
      };
    });
  }, [spaceAboveMenu]);
  const {
    visible,
    position,
    elements
  } = menuState;
  const value = useMemo(() => ({
    presentMenu,
    closeMenu
  }), [presentMenu, closeMenu]);
  const extraMarginValue = stackType === 'native' ? 'alreadyHandled' : 'toBeHandled';
  return /*#__PURE__*/React.createElement(OverflowMenuContext.Provider, {
    value: value
  }, /*#__PURE__*/React.createElement(ButtonsExtraMarginContext.Provider, {
    value: extraMarginValue
  }, React.Children.only(children), /*#__PURE__*/React.createElement(Menu, {
    visible: visible,
    onDismiss: closeMenu,
    anchor: position,
    contentStyle: {
      backgroundColor: card
    }
  }, elements)));
};
//# sourceMappingURL=OverflowMenuContext.js.map