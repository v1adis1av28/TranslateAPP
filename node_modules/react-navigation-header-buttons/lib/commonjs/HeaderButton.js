"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderButton = HeaderButton;
exports.defaultRenderVisibleButton = defaultRenderVisibleButton;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _elements = require("@react-navigation/elements");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
// for renderVisibleButton() function

// for <Item />, some things are optional while they are required for HeaderButton

function HeaderButton(props) {
  const {
    colors
  } = (0, _native.useTheme)();
  const themeColor = _reactNative.Platform.select({
    ios: colors.primary,
    default: colors.text
  });
  const {
    renderButton,
    style,
    color,
    ...other
  } = props;
  const ButtonElement = renderButton({
    color: color || themeColor,
    ...other
  });
  return /*#__PURE__*/React.createElement(_elements.PlatformPressable, _extends({
    hitSlop: buttonHitSlop
    // @ts-expect-error typings too strict
    ,
    style: _reactNative.StyleSheet.compose(styles.buttonContainer, style),
    android_ripple: rippleConfig
  }, other), ButtonElement);
}
function defaultRenderVisibleButton(visibleButtonProps) {
  const {
    IconComponent,
    iconSize,
    color,
    iconName,
    title,
    buttonStyle
  } = visibleButtonProps;
  return IconComponent && iconName ? /*#__PURE__*/React.createElement(IconComponent, {
    name: iconName,
    color: color,
    size: iconSize,
    style: buttonStyle
  }) : /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: [styles.text, {
      color
    }, buttonStyle]
  }, title);
}
const styles = _reactNative.StyleSheet.create({
  text: {
    ..._reactNative.Platform.select({
      android: {
        fontFamily: 'sans-serif-medium',
        fontSize: 14,
        textTransform: 'uppercase'
      },
      default: {
        fontSize: 17,
        textTransform: 'capitalize'
      }
    })
  },
  buttonContainer: {
    alignItems: 'center',
    justifyContent: 'center'
  }
});
const rippleConfig = {
  foreground: true,
  borderless: true,
  radius: 20
};
const buttonHitSlop = {
  top: 5,
  bottom: 5,
  left: 5,
  right: 5
};
//# sourceMappingURL=HeaderButton.js.map