"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OverflowMenu = void 0;
var _overflowMenuPressHandlers = require("./overflowMenuPressHandlers");
var _OverflowMenuContext = require("./OverflowMenuContext");
var _reactNative = require("react-native");
var _HeaderButton = require("../HeaderButton");
var _e2e = require("../e2e");
var _ButtonsWrapper = require("../ButtonsWrapper");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const OverflowMenu = _ref => {
  let {
    children,
    OverflowIcon = /*#__PURE__*/React.createElement(_reactNative.View, null),
    accessibilityLabel = 'More options',
    testID = _e2e.OVERFLOW_BUTTON_TEST_ID,
    onPress = _overflowMenuPressHandlers.defaultOnOverflowMenuPress,
    left = false,
    // this is needed only when OverflowMenu is rendered without HeaderButtons,
    preset,
    ...other
  } = _ref;
  const presentationCalls = (0, _OverflowMenuContext.useOverflowMenu)();
  const btnRef = (0, React.useRef)(null);
  const renderButtonElement = (0, React.useCallback)(_ref2 => {
    let {
      color
    } = _ref2;
    return /*#__PURE__*/(0, React.isValidElement)(OverflowIcon) ? OverflowIcon : /*#__PURE__*/React.createElement(OverflowIcon, {
      color: color
    });
  }, [OverflowIcon]);
  const presentOverflowMenu = (0, React.useCallback)(() => {
    const titlesAndOnPresses = onPress === _overflowMenuPressHandlers.overflowMenuPressHandlerDropdownMenu ? [] : (0, _overflowMenuPressHandlers.extractOverflowButtonData)(children);
    onPress({
      children,
      hiddenButtons: titlesAndOnPresses,
      overflowButtonRef: btnRef.current,
      ...presentationCalls
    });
  }, [children, onPress, presentationCalls]);
  const validChildren = React.Children.toArray(children).filter(React.isValidElement);
  if (validChildren.length === 0) {
    return null;
  }
  return /*#__PURE__*/React.createElement(_ButtonsWrapper.ButtonsWrapper, {
    left: left,
    style: styles.wrapper,
    preset: preset
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    ref: btnRef,
    collapsable: false,
    style: styles.overflowMenuAnchor
  }), /*#__PURE__*/React.createElement(_HeaderButton.HeaderButton, _extends({
    title: "overflow menu",
    renderButton: renderButtonElement,
    onPress: presentOverflowMenu,
    accessibilityLabel: accessibilityLabel,
    testID: testID
  }, other)));
};
exports.OverflowMenu = OverflowMenu;
const styles = _reactNative.StyleSheet.create({
  wrapper: {
    columnGap: 0
  },
  overflowMenuAnchor: {
    // these are really just needed bcs of the native android popup menu
    position: 'absolute',
    top: -_OverflowMenuContext.OVERFLOW_TOP,
    // TODO android actually has a little gap on the right of the menu
    right: -15,
    backgroundColor: 'transparent',
    width: 1,
    height: 1
  }
});
//# sourceMappingURL=OverflowMenu.js.map