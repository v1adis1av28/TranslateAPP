"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuItem = MenuItem;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _elements = require("@react-navigation/elements");
var _native = require("@react-navigation/native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * A component to show a single list item inside a Menu.
 */
function MenuItem(props) {
  const {
    icon,
    title,
    disabled,
    onPress,
    style,
    titleStyle,
    testID
  } = props;
  const {
    dark,
    colors: {
      text
    }
  } = (0, _native.useTheme)();
  const disabledColor = dark ? styles.darkDisabled : styles.lightDisabled;
  const titleColor = disabled ? disabledColor : {
    color: text
  };
  const themePressColorAndroid = dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)';
  return /*#__PURE__*/React.createElement(_elements.PlatformPressable, {
    style: [styles.container, style],
    onPress: onPress,
    disabled: disabled,
    testID: testID,
    pressColor: themePressColorAndroid
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.row
  }, /*#__PURE__*/React.isValidElement(icon) && /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.item, styles.icon],
    pointerEvents: "box-none"
  }, icon), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.item, styles.content, icon != null ? styles.widthWithIcon : undefined],
    pointerEvents: "none"
  }, /*#__PURE__*/React.createElement(_reactNative.Text, {
    selectable: false,
    numberOfLines: 1,
    style: [styles.title, titleColor, titleStyle]
  }, title))));
}
const minWidth = 112;
const maxWidth = 280;
const iconWidth = 25;
const styles = _reactNative.StyleSheet.create({
  container: {
    paddingHorizontal: 8,
    minWidth,
    maxWidth,
    height: 48,
    justifyContent: 'center'
  },
  row: {
    flexDirection: 'row'
  },
  icon: {
    width: iconWidth
  },
  title: {
    fontSize: 16
  },
  item: {
    marginHorizontal: 8
  },
  content: {
    justifyContent: 'center',
    minWidth: minWidth - 16,
    maxWidth: maxWidth - 16
  },
  widthWithIcon: {
    maxWidth: maxWidth - (iconWidth + 48)
  },
  lightDisabled: {
    color: 'rgba(0, 0, 0, 0.32)'
  },
  darkDisabled: {
    color: 'rgba(255, 255, 255, 0.32)'
  }
});
//# sourceMappingURL=MenuItem.js.map