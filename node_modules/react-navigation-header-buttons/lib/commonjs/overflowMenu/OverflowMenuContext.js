"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOverflowMenu = exports.OVERFLOW_TOP = exports.HeaderButtonsProvider = void 0;
var _reactNative = require("react-native");
var _statusBarUtils = require("./statusBarUtils");
var _Menu = require("./vendor/Menu");
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _ButtonsWrapper = require("../ButtonsWrapper");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const OVERFLOW_TOP = 15;
exports.OVERFLOW_TOP = OVERFLOW_TOP;
const warn = () => {
  // the noop value will be replaced by HeaderButtonsProvider rendered in app root
  console.warn('It seems like you tried to open / close the overflow menu using the overflowMenuPressHandlerDropdownMenu' + ' - which is the default handler on android - but you forgot to wrap your root component in <HeaderButtonsProvider />.' + 'Please check the installation instructions in the react-navigation-header-buttons readme :)');
};
const OverflowMenuContext = /*#__PURE__*/(0, React.createContext)({
  presentMenu: warn,
  closeMenu: warn
});
const useOverflowMenu = () => (0, React.useContext)(OverflowMenuContext);
exports.useOverflowMenu = useOverflowMenu;
const HeaderButtonsProvider = _ref => {
  let {
    children,
    spaceAboveMenu,
    stackType
  } = _ref;
  const [menuState, setMenuState] = (0, React.useState)({
    visible: false,
    position: {
      x: _reactNative.Dimensions.get('window').width - 10,
      y: 40
    },
    elements: null
  });
  const {
    colors: {
      card
    }
  } = (0, _native.useTheme)();
  const closeMenu = (0, React.useCallback)(() => {
    setMenuState(prevState => ({
      ...prevState,
      visible: false
    }));
  }, []);
  const presentMenu = (0, React.useCallback)(params => {
    const extraDelta = spaceAboveMenu ?? (0, _statusBarUtils.getDefaultSpaceAboveMenu)();
    setMenuState(prevState => {
      const position = params ? {
        x: params.x,
        y: params.y + extraDelta
      } : prevState.position;
      const elements = params ? params.elements : prevState.elements;
      return {
        ...prevState,
        position,
        elements,
        visible: true
      };
    });
  }, [spaceAboveMenu]);
  const {
    visible,
    position,
    elements
  } = menuState;
  const value = (0, React.useMemo)(() => ({
    presentMenu,
    closeMenu
  }), [presentMenu, closeMenu]);
  const extraMarginValue = stackType === 'native' ? 'alreadyHandled' : 'toBeHandled';
  return /*#__PURE__*/React.createElement(OverflowMenuContext.Provider, {
    value: value
  }, /*#__PURE__*/React.createElement(_ButtonsWrapper.ButtonsExtraMarginContext.Provider, {
    value: extraMarginValue
  }, React.Children.only(children), /*#__PURE__*/React.createElement(_Menu.Menu, {
    visible: visible,
    onDismiss: closeMenu,
    anchor: position,
    contentStyle: {
      backgroundColor: card
    }
  }, elements)));
};
exports.HeaderButtonsProvider = HeaderButtonsProvider;
//# sourceMappingURL=OverflowMenuContext.js.map