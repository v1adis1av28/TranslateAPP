"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HiddenItem = HiddenItem;
exports.Item = Item;
var React = _interopRequireWildcard(require("react"));
var _HeaderButtonComponentContext = require("./HeaderButtonComponentContext");
var _OverflowMenuContext = require("./overflowMenu/OverflowMenuContext");
var _MenuItem = require("./overflowMenu/vendor/MenuItem");
var _HeaderButton = require("./HeaderButton");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function HiddenItem(_ref) {
  let {
    onPress,
    ...otherProps
  } = _ref;
  const {
    closeMenu
  } = (0, _OverflowMenuContext.useOverflowMenu)();

  // when rendering dropdown menu (e.g. android default) the return value is actually rendered
  // when we show action sheet, we do not render the returned value,
  // but just extract title, onPress and destructive passed to HiddenItem. HiddenItem() is not called
  const onMenuItemPress = nativeEvent => {
    closeMenu();
    onPress && onPress(nativeEvent);
  };
  return /*#__PURE__*/React.createElement(_MenuItem.MenuItem, _extends({}, otherProps, {
    onPress: onMenuItemPress
  }));
}

// TODO check RTL
function Item(props) {
  const HeaderButtonComponent = React.useContext(_HeaderButtonComponentContext.HeaderButtonComponentContext);
  // HeaderButtonComponent (HeaderButton by default) already is provided iconSize, icon color and etc.
  // Item itself will likely only have title, onPress and iconName
  // but also can override iconSize, icon color, etc. if needed
  return /*#__PURE__*/React.createElement(HeaderButtonComponent, _extends({
    renderButton: _HeaderButton.defaultRenderVisibleButton
  }, props));
}
//# sourceMappingURL=HeaderItems.js.map