"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHeaderMargin = exports.ButtonsWrapper = exports.ButtonsExtraMarginContext = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * the `left` prop can be provided to HeaderButtons as well as OverflowMenu
 * this will render some extra margins on the corresponding side
 * but must be considered only once which is the job of this Context
 * */

const ButtonsExtraMarginContext = /*#__PURE__*/React.createContext('toBeHandled');
exports.ButtonsExtraMarginContext = ButtonsExtraMarginContext;
const ButtonsWrapper = _ref => {
  let {
    left,
    children,
    style,
    preset = 'stackHeader'
  } = _ref;
  const marginStatus = React.useContext(ButtonsExtraMarginContext);
  const extraSideMargin = preset === 'tabHeader' || marginStatus === 'toBeHandled' ? getHeaderMargin(left) : undefined;
  return /*#__PURE__*/React.createElement(ButtonsExtraMarginContext.Provider, {
    value: "alreadyHandled"
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.row, extraSideMargin, style]
  }, children));
};
exports.ButtonsWrapper = ButtonsWrapper;
const getHeaderMargin = function () {
  let left = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return left ? styles.extraEdgeMarginOnLeft : styles.extraEdgeMarginOnRight;
};
exports.getHeaderMargin = getHeaderMargin;
const styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    ..._reactNative.Platform.select({
      android: {
        columnGap: 18
      },
      default: {
        columnGap: 24
      }
    })
  },
  extraEdgeMarginOnLeft: {
    // not used in native stack
    // only applies in JS stack or when rendered as a header for a tab navigator
    ..._reactNative.Platform.select({
      android: {
        marginLeft: 15
      },
      default: {
        marginLeft: 14
      }
    })
  },
  extraEdgeMarginOnRight: {
    // not used in native stack
    // only applies in JS stack or when rendered as a header for a tab navigator
    ..._reactNative.Platform.select({
      android: {
        marginRight: 14
      },
      default: {
        marginRight: 15
      }
    })
  }
});
//# sourceMappingURL=ButtonsWrapper.js.map